function createDaysOfTheWeek() {
  const weekDays = ['Domingo', 'Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado']
  const weekDaysList = document.querySelector('.week-days');

  for (let index = 0; index < weekDays.length; index += 1) {
    const days = weekDays[index];
    const dayListItem = document.createElement('li');
    dayListItem.innerHTML = days;

    weekDaysList.appendChild(dayListItem);
  };
};

createDaysOfTheWeek();

/* 
Exerc√≠cio 1:

1. Crie um calend√°rio dinamicamente.

O array decemberDaysList cont√©m os dois √∫ltimos dias de novembro e os dias do m√™s de dezembro. Sua fun√ß√£o deve criar dinamicamente cada dia do calend√°rio e os adicionar dentro da tag <ul>.

Note que os dias 29 e 30 de novembro est√£o no array, pois representam respectivamente Domingo e Segunda-feira.

2. A tag <ul> deve conter o id 'days';

3. Os dias devem estar contidos em uma tag <li>, e todos devem ter a classe day. Ex: <li class="day">3</li>

4. Os dias 24, 25 e 31 s√£o feriados e, al√©m da classe day, devem conter tamb√©m a classe holiday. Ex: <li class="day holiday">24</li>

5. Os dias 4, 11, 18 e 25 s√£o sextas-feiras. Eles devem conter a classe day e a classe friday. Ex: <li class="day friday">4</li> */


let diasDeDezembro = [29, 30, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];
let diasLista = document.getElementById('days');

function criaOsDiasdoMes () {

  for (let index = 0; index < diasDeDezembro.length; index += 1) {
    const dias = document.createElement('li');
    dias.innerHTML = diasDeDezembro[index];

    if (diasDeDezembro[index] == 24 || diasDeDezembro[index] == 31) {
      dias.className = 'day holiday';
      diasLista.appendChild(dias);
    } else if (diasDeDezembro[index] == 25) {
      dias.className = 'day friday holiday';
      diasLista.appendChild(dias);
    } else if (diasDeDezembro[index] == 4 || diasDeDezembro[index] == 11 || diasDeDezembro[index] == 18) {
      dias.className = 'day friday';
      diasLista.appendChild(dias);
    } else {
      dias.className = 'day';
      diasLista.appendChild(dias);
    }
  }
}

criaOsDiasdoMes();

/* Exerc√≠cio 2:
Implemente uma fun√ß√£o que crie dinamicamente um bot√£o com o nome "Feriados".
Sua fun√ß√£o deve receber um par√¢metro com a string 'Feriados'
Adicione a este bot√£o a ID "btn-holiday"
Adicione este bot√£o como filho/filha da tag <div> com classe "buttons-container" */

function criaBotaoFeriados (string) { 
  const divPai = document.getElementsByClassName('buttons-container')[0];
  const botao = document.createElement('button');
  botao.id = 'btn-holiday';
  botao.innerHTML = string;
  divPai.appendChild(botao);
}

criaBotaoFeriados('Feriados');

/* Exerc√≠cio 3:
Implemente uma fun√ß√£o que muda a cor de fundo dos dias que possuem a classe "holiday".
Adicione ao bot√£o "Feriados" um evento de "click" que altere a cor de fundo dos dias que possuem a classe "holiday"
üëÄ √â interessante que esse bot√£o possua tamb√©m a l√≥gica inversa. Ao ser clicado novamente, ele retorna √† configura√ß√£o inicial com a cor "rgb(238,238,238)". */

const feriados = document.getElementsByClassName('holiday');
const acessaBotaoFeriados = document.getElementById('btn-holiday');
const novaCorFeriados = 'rgb(82, 182, 154)';
const corPadraoFeriados = 'rgb(238,238,238)';

function alteraCorFeriados () {

  for (let index = 0; index < feriados.length; index += 1) {
    
    if (feriados[index].style.backgroundColor === novaCorFeriados) {
      feriados[index].style.backgroundColor = corPadraoFeriados;
    } else {
      feriados[index].style.backgroundColor = novaCorFeriados;
    }
    
  }
}

acessaBotaoFeriados.addEventListener('click', alteraCorFeriados);

/* Exerc√≠cio 4:
Implemente uma fun√ß√£o que crie dinamicamente um bot√£o com o nome "Sexta-feira". Sua fun√ß√£o deve receber como par√¢metro a string "Sexta-feira".
Adicione a esse bot√£o o ID "btn-friday";
Adicione esse bot√£o como filho/filha da tag <div> com classe "buttons-container".
 */

function criaBotaoSexta (string) {
  const buttonsContainer = document.querySelector('.buttons-container');
  const botaoSexta = document.createElement('button')
  botaoSexta.id = 'btn-friday';
  botaoSexta.innerHTML = string
  buttonsContainer.appendChild(botaoSexta);
}

criaBotaoSexta('Sexta-feira');

/* Exerc√≠cio 5:
Implemente uma fun√ß√£o que modifica o texto exibido nos dias que s√£o Sexta-feira. Adicione ao bot√£o "Sexta-feira" um evento de "click" e modifique o texto a ser exibido nos dias que s√£o sextas-feiras.
üëÄ √â interessante que esse bot√£o possua tamb√©m a l√≥gica inversa. Ao ser clicado novamente, ele retorna √† configura√ß√£o inicial exibindo os dias. */

const sextasFeiras = document.getElementsByClassName('friday');
const acessaBotaoSexta = document.querySelector('#btn-friday');
const sextasPadrao = [4, 11, 18, 25];
const sextou = 'SEXTOU!';

function modificaTextoSexta() {

  for (let index = 0; index < sextasFeiras.length; index += 1) {
    if (sextasFeiras[index].innerHTML === sextou) {
      sextasFeiras[index].innerHTML = sextasPadrao[index];
    } else {
      sextasFeiras[index].innerHTML = sextou;
    }
  }
}

acessaBotaoSexta.addEventListener('click', modificaTextoSexta);

/* Exerc√≠cio 6:
Implemente duas fun√ß√µes que criem um efeito de "zoom". Ao passar o ponteiro do mouse em um dia do m√™s no calend√°rio, o texto desse dia deve aumentar e, quando o ponteiro do mouse sair do dia, o texto deve retornar ao tamanho original. */

